a$eval(name)
eval(a$name)
eval("a$",name)
a = NULL
a
class(a)
a = c(1, NULL)
class(a)
sum(a)
unclass(a)
a
a[1] <- 2
a
a[2] <- 3
a
a
fn <- function()
{
a <- 5
}
a
fn
a
c()
lazyFibonacciCore <- function(fibo, nfibo, nsteps, x)
{
if (nfibo < 3)
{
fibo <- c(1,1)
nfibo <- 2
nsteps <- 2
}
if (nfibo < x)
{
for (i in (nfibo+1):x)
fibo[i] <- fibo[i-1] + fibo[i-1]
nsteps <- nsteps + (x-nfibo)
nfibo <- x
}
c(fibo, nfibo, nsteps, fibo[x])
}
lazyFibonacci <- function(x)
{
lazyFibonacciCore(null,0,0,x)
}
lazyFibonacciCore(null,0,0,1)
lazyFibonacciCore(null,0,0,2)
lazyFibonacciCore(null,0,0,3)
lazyFibonacciCore(null,0,0,4)
x <- list(a=21,b=23);
unpackList(x);
print(a);
x
x
ls <- list(lfibo = NULL, lnfibo = 0, lnsteps = 0, lx = 3)
ls
print(ls)
head(ls)
print(head(ls))
ls
lazyFibonacciCore(ls)
lazyFibonacciCore <- function(fl)
{
#unpack
fibo <- fl$lfibo
nfibo <- fl$lnfibo
nsteps <- fl$lnsteps
x <- fl$lx
#calculate
if (nfibo < 3)
{
fibo <- c(1,1)
nfibo <- 2
nsteps <- 2
}
if (nfibo < x)
{
for (i in (nfibo+1):x)
fibo[i] <- fibo[i-1] + fibo[i-1]
nsteps <- nsteps + (x-nfibo)
nfibo <- x
}
#return
list(lfibo = fibo, lnfibo = nfibo, lnsteps = nsteps, lx = fibo[x])
}
lazyFibonacciCore(ls)
lazyFibonacciCore(ls)
class(lazyFibonacciCore(ls))
ls3 <- lazyFibonacciCore(ls)
ls3
ls3$lx <- 4
ls3
lazyFibonacciCore(ls3)
ls
ls$lx <- 8
ls
lazyFibonacciCore(ls)
3:#
x
3:#
a
3:3
lazyFibonacciCore <- function(fl)
{
#unpack
fibo <- fl$lfibo
nfibo <- fl$lnfibo
nsteps <- fl$lnsteps
x <- fl$lx
#calculate
if (nfibo < 3)
{
fibo <- c(1,1)
nfibo <- 2
nsteps <- 2
}
if (nfibo < x)
{
for (i in (nfibo+1):x)
fibo[i] <- fibo[i-1] + fibo[i-2]
nsteps <- nsteps + (x-nfibo)
nfibo <- x
}
#return
list(lfibo = fibo, lnfibo = nfibo, lnsteps = nsteps, lx = fibo[x])
}
ls
lazyFibonacciCore(ls)
ls8 <- lazyFibonacciCore(ls)
ls8
ls15 <- ls8
ls15$lx <- 15
ls15
ls15 <- lazyFibonacciCore(ls15)
ls15
ls
global 1
global a
cls
cls <- class(a)
cls
ls
lf
ls <- list(lfibo = c(), lnfibo = 0, lnsteps = 0)
lazyFibonacci <- function(x)
{
#lazyFibonacciCore(null,0,0,x)
ls$lnsteps <- x+1
}
ls
ls()
lazyFibonacci(5)
ls
a <- c(1, 2, 3, 3, 4, 1, 3)
a <- c(1, 2, 3, 3, 4, 1, 3)
for (i in seq_along(a))
c
rm(a)
rm(i)
getwd()
cd "GitHub/"
setwd("C:/Users/Robi/github/datasciencecoursera/R Programming")
getwd()
ls
ls()
source("functions.R")
lazyFibonacci(5)
ls
lazyFibonacci(5)
ls
ls
lazyFibonacci(5)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(5)
ls$lnsteps <- x+1
ls
}
ls
.GlobalEnv
pos
debugSource('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
ls
lazyFibonacci(5)
a <- 1
a
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(5)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
a
lazyFibonacci(5)
a
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
ls
lazyFibonacci(ls)
lazyFibonacci(6)
ls
lazyFibonacci(5)
ls
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(5)
ls
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
a
ls
lazyFibonacci(5)
ls
?<<-
exists(a)
exists("a")
exists("ls")
exists("lt")
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(1)
lazyFibonacci(2)
lazyFibonacci(3)
lazyFibonacci(4)
rm lf
rm(lf)
rm(ls)
rm(ls$steps)
rm("ls$steps")
rm(ls)
View(lazyFibonacci)
View(lazyFibonacci)
View(lazyFibonacciCore)
lazyFibonacci(3)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(3)
lazyFibonacci(4)
lazyFibonacci(6)
lazyFibonacci(10)
lazyFibonacci(20)
lazyFibonacci(200)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
rm(lf)
lazyFibonacci(3)
lazyFibonacci(3)
lazyFibonacci(3)
lazyFibonacci(3)
lazyFibonacci(2)
lazyFibonacci(1)
lazyFibonacci(3)
lazyFibonacci(4)
lazyFibonacci(4)
lazyFibonacci(10)
lazyFibonacci(8)
lazyFibonacci(5)
lazyFibonacci(7)
lazyFibonacci(10)
lazyFibonacci(11)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(10)
lazyFibonacci(1)
lazyFibonacci(2)
lazyFibonacci(6)
lazyFibonacci(9)
lazyFibonacci(10)
lazyFibonacci(11)
lazyFibonacci(12)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(12)
lazyFibonacci(13)
lazyFibonacci(16)
lazyFibonacci(20)
lazyFibonacci(25)
lazyFibonacci(200)
Sys.sleep(1)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(200)
lazyFibonacci(20)
lazyFibonacci(77)
lazyFibonacci(755)
lazyFibonacci(133)
lazyFibonacci(333)
lazyFibonacci(777)
lazyFibonacci(1000)
lazyFibonacci(2000)
View(lf)
view(lf$lnfibo)
view("lf$lnfibo")
view(lf$lnfibo)
view(lf)
View(lf)
View(lf$lfibo)
View(lf$lnfibo)
View(lf$lnsteps)
View(lf$lfibo)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(12)
rm(lf)
lazyFibonacci(5)
paste("asdf", 3)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(5)
lazyFibonacci(6)
cat("asdf", 5)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacciCore <- function(fl, x)
{
#unpack
fibo <- fl$lfibo
nfibo <- fl$lnfibo
nsteps <- fl$lnsteps
#calculate
if (nfibo < 3)
{
fibo <- c(1,1)
nfibo <- 2
nsteps <- 2
print("Initializing first two elements: 1, 1")
#Sys.sleep(2)
}
if (nfibo < x)
{
for (i in (nfibo+1):x)
{
fibo[i] <- fibo[i-1] + fibo[i-2]
print(cat("Calculating element: ", i))
#Sys.sleep(1)
}
nsteps <- nsteps + (x-nfibo)
nfibo <- x
}
#return
list(store = list(lfibo = fibo, lnfibo = nfibo, lnsteps = nsteps), lx = fibo[x])
}
lazyFibonacci(7)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(7)
lazyFibonacci(8)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(8)
lazyFibonacci(9)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(10)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
paste("asdf", 5)
paste(c("asdf", 5))
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(12)
lazyFibonacci(11)
lazyFibonacci(6)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
rm(lf)
lf(`ls$lnsteps`)
rm(`ls$lnsteps`)
a
rm(a)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
ls
ls()
rm()
rm(lazyFibonacci)
rm(lazyFibonacciCore)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
lazyFibonacci(5)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
ls
lf
lazyFibonacci(6, saveState = F)
lf
lazyFibonacci(9, saveState = F)
lazyFibonacci(1, saveState = F)
lazyFibonacci(10, saveState = F)
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
source('C:/Users/Robi/github/datasciencecoursera/R Programming/functions.R')
rm lf
rm(lf)
lazyFibonacci(5)
lf
lazyFibonacci(10)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = F)
lazyFibonacci(15, saveState = T)
lazyFibonacci(15, saveState = T)
lazyFibonacci(15, saveState = F)
lazyFibonacci(16, saveState = F)
lazyFibonacci(16, saveState = F)
rm(lf)
lazyFibonacci(16, saveState = F)
lazyFibonacci(16, saveState = F)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,10)
seq(1,20)
seq(0.5, 10, by = 0.5)
seq(0, 10, by = 0.5)
seq(5,10,length.out = 30)
seq(5,10,length = 30)
my_seq <- seq(5,10,length.out = 30)
length(my_seq)
seq_along(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "webmartingale")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<- x[~is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
-c(2,10)
x[-c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect$bar
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector$dim
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
names <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
my_matrix
cbind(my_matrix, patients)
cbind(patients, my_matrix)
play()
my_matrix
patients
m <- cbind(patients, my_matrix)
m
class(m)
dim(m)
unclass(m)
dim(m) <- c()
dim(m)
m
nxt()
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
